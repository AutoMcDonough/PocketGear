<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DisplayName_Block_PocketGear_Base" xml:space="preserve">
    <value>PocketGear Base</value>
  </data>
  <data name="DisplayName_Block_PocketGear_Large_Base" xml:space="preserve">
    <value>PocketGear Large Base</value>
  </data>
  <data name="DisplayName_Block_PocketGear_Part" xml:space="preserve">
    <value>PocketGear Part</value>
  </data>
  <data name="DisplayName_Block_PocketGear_Large_Part" xml:space="preserve">
    <value>PocketGear Large Part</value>
  </data>
  <data name="DisplayName_Block_PocketGear_Pad" xml:space="preserve">
    <value>PocketGear Pad</value>
  </data>
  <data name="DisplayName_Block_PocketGear_Large_Pad" xml:space="preserve">
    <value>PocketGear Large Pad</value>
  </data>
  <data name="DisplayName_Block_PocketGear_MagLock" xml:space="preserve">
    <value>PocketGear MagLock</value>
  </data>
  <data name="Description_PocketGear_Base" xml:space="preserve">
    <value>PocketGears are retractable landing gears and capable of magnetically locking to any surface.</value>
  </data>
  <data name="Description_PocketGear_Part" xml:space="preserve">
    <value>This is a part of a PocketGear which will retract into the PocketGear Base.</value>
  </data>
  <data name="Description_PocketGear_Pad" xml:space="preserve">
    <value>PocketGear Pads capable of magnetically locking to any surface.

PocketGear Pads can be locked and unlocked by pressing [{CONTROL:LANDING_GEAR}] when inside a cockpit. 
They will show up yellow when in range of a surface that they can lock onto.</value>
  </data>
  <data name="Description_PocketGear_MagLock" xml:space="preserve">
    <value>MagLocks are capable of magnetically locking to any surface over a long distance.

MagLocks can be locked and unlocked by pressing [{CONTROL:LANDING_GEAR}] when inside a cockpit.
They will show up yellow when in range of a surface that they can lock onto.</value>
  </data>
  <data name="BlockPropertyTitle_DeployVelocity" xml:space="preserve">
    <value>Deploy Velocity</value>
  </data>
  <data name="BlockPropertyTooltip_DeployVelocity" xml:space="preserve">
    <value>The speed at which the PocketGear is retracted / extended.</value>
  </data>
  <data name="BlockPropertyTitle_LockRetractBehavior" xml:space="preserve">
    <value>Lock Retract Behavior</value>
  </data>
  <data name="BlockPropertyTooltip_LockRetractBehavior" xml:space="preserve">
    <value>Whether it should prevent retracting if locked or if it should unlock on retract.</value>
  </data>
  <data name="BlockPropertyTitle_LockRetractBehavior_PreventRetract" xml:space="preserve">
    <value>Prevent Retracting</value>
  </data>
  <data name="BlockPropertyTitle_LockRetractBehavior_UnlockOnRetract" xml:space="preserve">
    <value>Unlock on retract</value>
  </data>
  <data name="BlockActionTitle_PlaceLandingPad" xml:space="preserve">
    <value>Place Pad</value>
  </data>
  <data name="BlockActionTooltip_PlaceLandingPad" xml:space="preserve">
    <value>Place a new PocketGear Pad.</value>
  </data>
  <data name="BlockPropertyTitle_SwitchDeployState" xml:space="preserve">
    <value>Switch Deploy State</value>
  </data>
  <data name="BlockPropertyTooltip_SwitchDeployState" xml:space="preserve">
    <value>Switch between deploy and retract.</value>
  </data>
  <data name="BlockPropertyTitle_SwitchDeployState_Deploy" xml:space="preserve">
    <value>Deploy</value>
  </data>
  <data name="BlockPropertyTitle_SwitchDeployState_Retract" xml:space="preserve">
    <value>Retract</value>
  </data>
</root>